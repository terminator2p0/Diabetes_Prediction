# -*- coding: utf-8 -*-
"""ML_Logistic regression.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gU-q8IeVo6rjsMh9H43Op1cN2OGCo9ju
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

from google.colab import drive
drive.mount('/content/drive', force_remount=True)
file_path = "/content/drive/MyDrive/pima-indians-diabetes.csv"
df = pd.read_csv(file_path)
df.columns
df.describe()
df.info()
df=df.drop_duplicates()
df.isnull().sum()

df['Glucose']=df['Glucose'].replace(0,df['Glucose'].mean())
df['BloodPressure']=df['BloodPressure'].replace(0,df['BloodPressure'].mean())
df['SkinThickness']=df['SkinThickness'].replace(0,df['SkinThickness'].median())
df['Insulin']=df['Insulin'].replace(0,df['Insulin'].median())
df['BMI']=df['BMI'].replace(0,df['BMI'].median())

corrmat=df.corr()
sns.heatmap(corrmat, annot=True)
df_selected=df.drop(['BloodPressure','Insulin','DiabetesPedigreeFunction'],axis='columns')

from sklearn.preprocessing import QuantileTransformer
x=df_selected
quantile  = QuantileTransformer()
X = quantile.fit_transform(x)
df_new=quantile.transform(X)
df_new=pd.DataFrame(X)
df_new.columns =['Pregnancies', 'Glucose','SkinThickness','BMI','Age','Outcome']
df_new.head()

target_name='Outcome'
y= df_new[target_name]
X=df_new.drop(target_name,axis=1)
X.head()
y.head()

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test= train_test_split(X,y,test_size=0.2,random_state=0)
X_train.shape,y_train.shape
X_test.shape,y_test.shape

from sklearn.linear_model import LogisticRegression
from sklearn.metrics import confusion_matrix
from sklearn.metrics import f1_score, precision_score, recall_score,accuracy_score

reg = LogisticRegression()

reg.fit(X_train,y_train)

y_train_pred = reg.predict(X_train)

lr_pred=reg.predict(X_test)

print("Testing Accuracy score\n",accuracy_score(y_test,lr_pred))
print("Training Accuracy score\n",accuracy_score(y_train, y_train_pred))
print("\n F1:\n",f1_score(y_test,lr_pred))
print("\n Precision score is:\n",precision_score(y_test,lr_pred))
print("\n Recall score is:\n",recall_score(y_test,lr_pred))
print("\n Confusion Matrix:\n")
sns.heatmap(confusion_matrix(y_test,lr_pred))